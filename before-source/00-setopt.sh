#!/usr/bin/zsh

typeset -a zsh_options=(
  # NOTE: Changing Directories

  # 若发出的命令无法作为普通命令执行，且该命令为目录名称时，则对该目录执行 cd 命令。
  # 此选项仅当设置了 SHIN_STDIN 选项（即从标准输入读取命令时）生效。
  # 该功能专为交互式使用设计；建议在脚本中显式使用 cd 命令以避免歧义。
  AUTO_CD

  # 使用 cd 命令切换目录时，自动将原目录压入目录栈。
  AUTO_PUSHD

  # 若 cd 命令的参数（或设置了 AUTO_CD 选项时的隐式 cd）不是目录且不以斜杠开头时，
  # 将尝试以波浪号 ‘~’ 开头的表达式方式对其进行扩展（参见“文件名扩展”章节）。
  CDABLE_VARS

  # 在执行 cd 命令（无论是显式调用还是通过设置 AUTO_CD 选项的隐式调用）后，
  # 始终不打印工作目录。通常，当参数为 -、栈条目或通过 CDPATH 查找到的目录名时，
  # cd 命令会打印工作目录。请注意，此行为与 pushd 的栈打印行为（由 PUSHD_SILENT 控制）
  # 不同。本选项会覆盖 POSIX_CD 中与打印相关的效果。
  #CD_SILENT

  # 当切换到含 ‘..’ 路径段的目录时（该段通常会抵消路径中的前一段，例如 ‘foo/..’ 会被从路径中移除，
  # 或者若 ‘..’ 位于路径开头，则会移除当前工作目录的最后一段），
  # 将改为解析路径至物理目录。此选项会被 CHASE_LINKS 选项覆盖。
  #
  # 例如：假设 /foo/bar 是指向目录 /alt/rod 的符号链接。
  # 未设置此选项时，‘cd /foo/bar/..’ 会切换到 /foo；
  # 设置后则会切换到 /alt。若当前目录为 /foo/bar 时执行 ‘cd ..’ 亦遵循此规则。
  # 请注意，路径中所有其他符号链接也将会被解析。
  #CHASE_DOTS

  # 切换目录时将符号链接解析为其真实路径。此选项同时具有 CHASE_DOTS 的效果，即
  # 即使前导路径段是符号链接，‘..’ 路径段也会被视作指向物理父目录。
  #CHASE_LINKS

  # 修改 cd、chdir 和 pushd 命令的行为，使其更符合 POSIX 标准。
  # 未设置此选项时的行为在 zshbuiltins(1) 的 cd 内置命令文档中描述。
  # 若设置此选项，shell 会先测试cdpath 中的所有目录，
  # 最后才测试本地目录（‘.’）；且 cd 与 chdir 命令不再将 ‘{+|-}n’ 形式的参数识别为目录栈条目。
  #
  # 此外，设置此选项后会修改 shell 切换目录后打印新目录的条件。
  # 该行为不再仅限于交互式 shell（但 pushd 打印目录栈的行为仍限于交互式 shell）；
  # 且只要使用了 CDPATH 的组件（包括 ‘.’，但不包括本身被视作 ‘.’ 的空组件），都会触发目录打印。
  #POSIX_CD

  # 禁止将同一目录的多个副本压入目录栈。
  PUSHD_IGNORE_DUPS

  # 当使用数字指定栈中的目录时，交换 ‘+’ 和 ‘-’ 的含义。
  #PUSHD_MINUS

  # 禁止在执行 pushd 或 popd 命令后打印目录栈。
  #PUSHD_SILENT

  # 使不带参数的 pushd 命令执行 ‘pushd $HOME’ 操作（即切换至用户主目录）。
  #PUSHD_TO_HOME


  # NOTE: Completion

  # 如果未设置，提供补全列表的键函数在给定数值参数时会尝试返回到上一个提示符。
  # 如果已设置，这些函数在未给定数值参数时会尝试返回到上一个提示符。
  #ALWAYS_LAST_PROMPT

  # 若在词内进行补全且插入了完整补全项，则光标将移至词尾。
  # 也就是说，无论是插入了单个匹配项还是执行了菜单补全，光标都会被移至词尾。
  ALWAYS_TO_END

  # 在遇到歧义补全时自动列出候选项。
  AUTO_LIST

  # 在连续第二次请求补全（例如重复按下 Tab 键）后自动启用菜单补全功能。
  # 该选项会被 MENU_COMPLETE 设置覆盖。
  #AUTO_MENU

  # 任何被设置为目录绝对路径名称的参数都会立即成为该目录的名称，
  # 该名称将被 ‘%~’ 及相关提示符序列使用，并在对以 ‘~’ 开头的词进行补全时生效
  # （否则必须首先以‘~参数’ 的形式使用该参数）。
  #AUTO_NAME_DIRS

  # 若已完成参数名补全且自动插入了后续字符（通常为空格），
  # 而此时键入的下一个字符属于必须紧接在参数名后的字符（例如 ‘}’、‘:’ 等），
  # 则会自动删除先前添加的字符，使键入的字符紧接在参数名之后。
  # 花括号扩展中的补全会受到类似影响：自动添加的 ‘,’ 字符若后续键入 ‘}’ 则会被删除。
  AUTO_PARAM_KEYS

  # 若补全的参数值为目录名称，则自动添加尾部斜杠而非空格。
  AUTO_PARAM_SLASH

  # 当补全产生的最后一个字符为斜杠，且接下来键入的字符是单词分隔符、
  # 斜杠或命令终止符（例如分号或 & 符号）时，将自动移除该斜杠。
  AUTO_REMOVE_SLASH

  # 当出现歧义补全时，若连续两次调用补全函数则自动列出候选项。
  # 该设置优先于 AUTO_LIST 选项，且受 LIST_AMBIGUOUS 设置的影响。
  # 若同时设置了 AUTO_MENU，则从第三次按键开始触发菜单补全行为。
  # 请注意，此功能与 MENU_COMPLETE 不兼容，因为在该模式下重复调用补全会直接循环遍历候选项列表。
  #BASH_AUTO_LIST

  # 阻止在尝试补全前对命令行中的别名进行内部替换。其效果是使别名在补全时被视为独立的命令。
  #COMPLETE_ALIASES

  # 如果未设置，开始补全时会将光标置于词尾；否则光标将保持原位，补全操作会从两端同时进行。
  #COMPLETE_IN_WORD

  # 当当前词包含通配模式时，不会直接插入扩展产生的所有词项，而是像 MENU_COMPLETE 那样生成补全匹配项并循环遍历。
  # 匹配项的生成方式相当于在词尾添加了 '*' 通配符，或在设置了 COMPLETE_IN_WORD 选项时在光标位置插入。
  # 此功能实际采用模式匹配而非通配扩展，因此不仅适用于文件补全，也适用于选项、用户名等任何补全场景。
  # 需注意：使用模式匹配器时，将无法使用匹配控制功能（例如大小写不敏感匹配或锚定匹配）。
  # 此限制仅在当前词包含模式时生效；仅开启 GLOB_COMPLETE 选项不会触发此限制。
  GLOB_COMPLETE

  # 在尝试命令补全或拼写校正时，确保首先对整个命令路径进行哈希处理。
  # 这会降低首次补全的速度，但能避免误报拼写错误。
  HASH_LIST_ALL

  # 当同时设置了 AUTO_LIST 或 BASH_AUTO_LIST 选项时，此选项生效。
  # 若存在明确的前缀可插入命令行，则直接插入而不显示补全列表；
  # 换言之，仅当无任何内容可插入时才会触发自动列表行为。
  # 对于 BASH_AUTO_LIST 的情况，这意味着列表显示将延迟至第三次调用补全函数时。
  LIST_AMBIGUOUS

  # 若补全因无匹配项而无法恢复（例如在菜单补全中允许滚动回绕的情况下），则产生响铃提示。
  # 若设置了此选项，则即使存在可恢复的补全失败（例如在未设置 NUMERIC 时指定了数值参数），也会强制发出响铃提示。
  LIST_BEEP

  # 尝试通过在不同宽度的列中打印匹配项，来使补全列表更小（占用更少的行）。
  LIST_PACKED

  # 以水平排序的方式布置补全列表中的匹配项。也就是说，第二个匹配项会显示在第一个的右边，而不是像通常那样显示在它的下面。
  LIST_ROWS_FIRST

  # 在列出可能的文件补全时，为每个文件类型添加尾部标识符以显示其类型。
  LIST_TYPES

  # 当出现模糊补全时，不列出候选项也不响铃，而是立即插入第一个匹配项。
  # 再次请求补全时，会移除第一个匹配项并插入第二个匹配项，依此类推。
  # 当所有匹配项循环完毕后，将重新回到第一个匹配项。
  # 可使用 reverse-menu-complete 以相反方向遍历列表。此选项会覆盖 AUTO_MENU 的设置。
  MENU_COMPLETE

  # 若命令行上的字符串与某个候选补全项完全一致，即使存在其他可匹配的扩展补全项
  # （例如在该字符串后添加其他内容），也会直接采用当前精确匹配项。
  #REC_EXACT

  # NOTE: Expansion and Globbing

  # 如果文件名生成模式格式错误，则打印错误消息。（若未设置此选项，则模式将保持不变。）
  BAD_PATTERN

  # 在通配模式中，若尾部圆括号组内不包含 ‘|’、‘(’ 或（特殊情况）‘~’ 字符，
  # 则将其视为限定符列表。具体说明参见“文件名生成”章节。
  #BARE_GLOB_QUAL

  # 将大括号内不进行花括号扩展的表达式展开为所有字符按字典顺序排列的列表。
  # 具体说明参见“花括号扩展”章节。
  #BRACE_CCL

  EXTENDED_GLOB

  #UNSET

  # NOTE: History

  # 如果设置了此选项，zsh 会话会将历史列表追加到历史文件中，而不是替换它。
  # 因此，多个并行的 zsh 会话都会将其历史列表中的新条目添加到历史文件中，按照它们退出的顺序。
  # 当行数增长超过 $SAVEHIST 指定的值 20% 时，文件仍然会被定期重写以修剪它（也参见 HIST_SAVE_BY_COPY 选项）。
  APPEND_HISTORY
  # 将每个命令的开始时间戳（自纪元以来的秒数）和持续时间（以秒为单位）保存到历史文件中。
  # 这种前缀数据的格式是：: <开始时间>:<经过秒数>;<命令>
  EXTENDED_HISTORY
  # 如果内部历史需要被修剪以添加当前命令行，
  # 设置此选项将首先导致最老的有重复的历史事件丢失，而不是丢失列表中的独特事件。
  # 您应该确保 HISTSIZE 的值大于 SAVEHIST 的值，以便为重复事件提供一些空间，
  # 否则一旦历史填充了独特事件，此选项的行为将与 HIST_IGNORE_ALL_DUPS 类似。
  HIST_EXPIRE_DUPS_FIRST
  # 在写入历史文件时，zsh 默认使用特设的文件锁定来避免某些操作系统上的已知锁定问题。
  # 使用此选项时，如果系统支持 fcntl 调用，则通过该方法进行锁定。
  # 在最新的操作系统上，这可能会提供更好的性能，特别是当文件存储在 NFS 上时可以避免历史记录损坏。
  HIST_FCNTL_LOCK
  # 在行编辑器中搜索历史记录条目时，即使重复项不连续，也不要显示之前找到的行的重复项。
  HIST_FIND_NO_DUPS
  # 当行上的第一个字符是空格，或者展开的别名之一包含前导空格时，从历史列表中删除命令行。
  # 只有正常的别名（不是全局别名或后缀别名）才有这种行为。
  # 请注意，该命令在内部历史记录中会一直存在，直到输入下一个命令之前才会消失，这允许您短暂地重新使用或编辑该行。
  # 如果您想在不输入另一个命令的情况下立即使其消失，请键入一个空格并按回车键。
  HIST_IGNORE_SPACE
  # 从历史列表中删除函数定义。请注意，函数在内部历史记录中会一直存在，直到输入下一个命令之前才会消失，这允许您短暂地重新使用或编辑该定义。
  #HIST_NO_FUNCTIONS
  NO_HIST_NO_FUNCTIONS
  # 不会从添加到历史列表的每个命令行中删除多余的空白字符。
  #HIST_REDUCE_BLANKS
  NO_HIST_REDUCE_BLANKS
  # 此选项是INC_APPEND_HISTORY的一个变体，其中在可能的情况下，历史条目在命令完成后写入文件，以便在EXTENDED_HISTORY格式的历史文件中正确记录命令所花费的时间。
  # 这意味着该历史条目不会立即从使用相同历史文件的其他shell实例中可用。
  # 此选项仅在关闭INC_APPEND_HISTORY和SHARE_HISTORY时才有用。这三个选项应视为互斥的。
  INC_APPEND_HISTORY_TIME
  # 尝试纠正命令的拼写。
  # 请注意，当HASH_LIST_ALL选项未设置或路径中的某些目录不可读时，首次使用某些命令时可能会错误地报告拼写错误。
  # 可以设置shell变量CORRECT_IGNORE为一个模式，以匹配永远不会作为更正建议提供的单词。
  CORRECT
  # 允许在交互式shell中使用注释。
  INTERACTIVE_COMMENTS
  # 在具有作业控制的 shell 退出之前，报告后台和挂起作业的状态；
  # 再次尝试退出 shell 将成功。NO_CHECK_JOBS 最好仅与 NO_HUP 结合使用，否则这些作业将自动被终止。
  # 如果从上一条命令行运行的命令中包含了 jobs 命令，则省略检查，因为假设用户知道存在后台或挂起作业。
  # 从函数部分“特殊函数”中定义的钩子函数之一中运行的 jobs 命令不计算在内。
  CHECK_JOBS
  # 在启用 CHECK_JOBS 时，同时检查正在运行和挂起的作业。
  # 当此选项被禁用时，zsh 仅检查挂起的作业，这与 bash 的默认行为相匹配。
  # 除非设置了 CHECK_JOBS，否则此选项没有效果。
  CHECK_RUNNING_JOBS
  # 当 shell 退出时，向正在运行的作业发送 HUP 信号。
  HUP
)

setopt $zsh_options

unset zsh_options

# vim:set tabstop=2 softtabstop=2 shiftwidth=2 expandtab:
